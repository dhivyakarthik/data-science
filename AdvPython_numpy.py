# -*- coding: utf-8 -*-
"""AdvancedPython-NumPy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p1di_iFPHM53fnUPyTKrZqVwkASauDpT
"""

import numpy as np

empty_array = np.array(object = [])

type(empty_array)

empty_array.dtype

empty_array.ndim

empty_array.shape

empty_array.size

my_array =np.array([1, 2, 3])
my_array.dtype

my_array = np.array([1.5, 2, 3])
my_array.dtype

np.array(range(1, 10))

np.arange(1, 10)

np.zeros(shape=10)

np.zeros(shape=10, dtype= 'int' )

np.ones(5)

np.linspace(start=2, stop=3, num=5)

np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

np.zeros((3, 3))

np.zeros(3, 3)

np.ones((3,3))

arr = np.array([1, 2, 3, 4, 5])

arr[0], arr[4], arr[-1], arr[4:], arr[:2], arr[::2], arr[::1], arr[::-1], arr[::-2]

ages_list = [18, 15, 23, 14, 20]
#ages_list >= 18 # cannot comapre lists to integers
ages = np.array(ages_list)
ages >= 18

ages[ages >= 18]

arr[[4,0,1]]

indeces = np.where(arr % 2 == 0)
indeces

arr[indeces]

np.where(arr > 2, 100, arr)

np.where(arr < 4, arr ** 2, -55)

#shallow copy and deep copy
arr1 = arr # shallow copy
arr1

arr1[arr1 > 2] = 100
arr1

arr

arr = np.array([1, 2, 3, 4, 5])
arr2 = arr.copy() # deep copy
arr2[arr2 > 2] = 200
arr, arr2

arr3d = np.array([[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24], [25, 26, 27]]])
arr3d

arr3d[0]

arr3d[0, 1, 2]

arr3d[:2, :2, :2]

arr3d[[0, 1, 2], [0, 1, 2], [0, 1, 2]]

arr3d > 15

arr3d[arr3d > 15]

np.where(arr3d > 15, arr3d, np.nan)

np.where(arr3d > 15)

arr3d[np.where(arr3d  >  15)]

arr3d[:, 0, :] #":" means everything

arr3d[:, 0]

arr3d[:, :, 0]

arr3d[..., 0]

arr3d[0, ...]

arr3d[0]

arr3 = np.array([
    [10, 20, 30, 40],
    [50, 60, 70, 80],
    [90, 100, 110, 120],
    [130, 140, 150, 160]
])

arr3[1:3, 1:3]

arr3[1:3]

arr3[1:-1, 1:-1]

arr3[1:3, -3:-1]

arr3[1:, 1:]

arr3[[1, 2], [1, 2]]

arr = np.array([1, 2, 3, 4, 5])

arr = np.append(arr = arr, values = 6)
arr

arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])

arr3 = np.array([7, 8, 9])
arr = np.concatenate([arr1, arr2, arr3])
arr

mat1 = np.array([[1, 2], [3, 4]])
mat2 = np.array([[5, 6]])
mat3 = np.array([[7], [8]])
np.concatenate((mat1, mat2), axis = 0)

np.concatenate((mat1, mat3), axis = 1)
np.concatenate((mat1, mat3), axis = 0)

#Given the following arrays:

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
c = np.array([[7, 8], [9, 10]])
d = np.array([[11, 12], [13, 14]])
np.concatenate((a, b), axis = 0)
#np.concatenate((a, b), axis = 1)
np.concatenate((c, d), axis = 0)
np.concatenate((c, d), axis = 1)

name = np.array(['Ashok', 'Ravi', 'Kumar', 'Sheila', 'P', 'Reddy'])
name
name.size

np.reshape(a = name, newshape = (2, 3))

np.reshape(a = name, newshape = (3, 2))
np.reshape(name, (1, 1, 6))
np.reshape(name, (6, 1, 1))
np.reshape(name, (-1, 3))
np.reshape(name, (2, -1))

mat = np.array([['Apple', 'Bread', 'Cheese'], ['Rs. 120', 'Rs. 20', 'Rs. 150']])
mat

mat.T

mat.transpose()

arr = np.array([[1, 2], [3, 4]])

np.transpose(arr)
np.transpose(arr, (1, 0))
np.shape(arr)

arr = np.arange(24)
arr

arr.shape
reshaped_4x6 = np.reshape(arr, (4, 6))
reshaped_4x6

reshaped_4x6[1,3]

reshaped2 = np.reshape(arr, (2, 3, 4))
reshaped2

reshaped2[0, 1, 2]

reshaped3 = arr.reshape(2, 2, 2, 3)
reshaped3

reshaped3[0, 1, 0, 2]

reshaped3[..., 2]

arr.shape

arr.size

reshaped_4x6

new_data = np.arange(24, 30)
new_data

4 - 1

reshaped_4x6.shape

new_data_1x6 = new_data.reshape(1, 6)
new_data_1x6

new_data_1x6 = new_data.reshape(-1, 6)
new_data_1x6

arr_with_new_row = np.append(reshaped_4x6, new_data_1x6, axis = 0)
arr_with_new_row

reshaped_4x6.shape

reshaped_6x4 = reshaped_4x6.T
reshaped_6x4.shape

new_data_1x6.transpose()

new_data_6x1 = new_data_1x6.reshape(6, 1)
new_data_6x1

arr_with_new_col = np.append(reshaped_6x4, new_data_6x1, axis = 1)
arr_with_new_col

import numpy as np

data = np.random.uniform(low= 10, high = 40, size = (365, 5))
data

weekly_data = data.reshape(-1, 7, 5)

data.shape #(365, 5)
rows_needed = 7  - (data.shape[0] % 7)
rows_needed #6
new_length = data.shape[0] + rows_needed
new_length #(371)
padded_data = np.zeros((new_length, data.shape[1]))
padded_data.shape #(371, 5)
padded_data[:data.shape[0], :] = data #pad data from 0 to 365, rest will be zeros
padded_data

weekly_data = padded_data.reshape(-1, 7, 5)
weekly_data.shape #(53, 7, 5)

padded_data2 = np.concatenate((data, np.zeros((rows_needed, 5))), axis = 0)

padded_data == padded_data2

np.array_equal(padded_data, padded_data2)

weekly_data[1] #week 1 data
weekly_data[-1] #data of last week of the year
weekly_data[13, 1, 4]

arr= np.array([1, 2, 3, 4, 5])
arr

l = [1, 2, 3, 4, 5]
l

arr + 10

#l + 10
[x + 10 for x in l]

arr ** 3

#lst ** 3
[x ** 3 for x in l]

data = np.array([
    [25, 50000, 4.5, 1, 0],
    [45, 80000, 12.2, 0, 1],
    [35, 60000, 5, 1, 1]
])
data

weights = np.array([1, 1, 3])
weights

data[:, :3] = (data[:, :3] - data[:, :3].mean()) / data[:, :3].std()
data

mat = np.array([[10, 20, 30], [40, 50, 60]])
mat
arr = np.array([1, 2, 3])
mat + arr

features = np.array([[23, 40000, 650], [32, 45000, 700], [40, 80000, 750]])  # age, income, credit score for each customer
features

features * weights

l1 = [1, 2, 3]
arr1 = np.array(l1)
l2 = [4, 5, 6]
arr2 = np.array(l2)
arr1, arr2

dot_prod = 0
for i in range(len(l1)): dot_prod += l1[i] *l2[i]
dot_prod

np.dot(arr1, arr2)

lst_mat1 = [[1, 2], [3, 4], [5, 6]]
mat1 = np.array(lst_mat1)
lst_mat2 = [[7, 8, 9], [10, 11, 12]]
mat2 = np.array(lst_mat2)

np.dot(mat1, mat2) #matrix multiplication
mat1 @ mat2 #matrix multiplication
np.matmul(mat1, mat2) #matrix multiplication

arr1.sum()
mat1.sum()
mat1.sum(axis = 0)
mat1.sum(axis = 1)

arr1.max()
arr1.min()
arr1.mean()
arr1.std()

mat1.max()
mat1.min()
mat1.max(axis=0)
mat1.max(axis=1)
mat1.min(axis=0)
mat1.min(axis=1)
mat1.mean(axis=0)
mat1.mean(axis=1)
mat1.std(axis=0)
mat1.std(axis=1)

arr3 = np.array([1, -2, 3, -4, -5])
np.abs(arr3)

np.exp(arr3)

np.power(arr3, 2)

np.sqrt(arr2)

np.sort(arr3)

np.sort(arr3)[::-1]
arr3.argsort()

