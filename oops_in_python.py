# -*- coding: utf-8 -*-
"""oops_in_python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LQOTv3W_uO1Gz-CWVaeLFXBlslSHDBgk

Objective: Student Management System

The goal of this system is to manage students' data efficiently as an administrator. The system will allow for creating, updating, and querying student records, managing courses, and making administrative changes to students' data.

## Defining a Class and Creating an Object
"""

class Course:
  pass

course1 = Course()
print(course1)

class Course:
  def __init__(self, name, duration):
    self.name = name
    self.duration = duration

course1 = Course("Data Science", "3 Months")
print(course1.name)
print(course1.duration)

course2 = Course("Machine Learning", "6 Months")
print(course2.name)
print(course2.duration)

"""Create a class named `Student` that includes an `__init__()` constructor to initialise attributes such as `name`, `age`, and `course`. Then, create an object of the `Student` class, pass values to the constructor, and display an introduction of the student."""

class Student:
  def __init__(self, name, age, course):
    self.name = name
    self.age = age
    self.course = course
  def introduction(self):
    return (f"Introducing Student: I am  {self.name}, {self.age} {self.course}")

student1 = Student("Dhivya", 35, "Data Science")
student1.doj = "2025-04-10" #instance attribute

student2 = Student("Vishnu", 5, course1)
print(student1.introduction())
print("Introducing Student: " + student1.name, student1.age, student1.course, student1.doj)
#print("Introducing Student: " + student2.name, student2.age, student2.course1.name, student2.course1.duration)

class Student:
  total_students = 0

  def __init__(self, name, age, course):
    self.name = name  #instancce attribute
    self.age = age
    self.course = course
    Student.total_students += 1 #class Attribute
  def introduction(self): #instance method
    return (f"Introducing Student: I am  {self.name}, {self.age} {self.course}")

  @classmethod
  def get_total_students(cls): #class method
    return f"Total students enrolled: {cls.total_students}"

student1 = Student("Dhivya", 35, "Data Science")
print(Student.total_students)
student2 = Student("Vishnu", 5, course1)
print(Student.total_students)

print(student1.introduction())
print(student2.introduction())
print(Student.get_total_students())

class GraduateStudent(Student):
  def __init__(self, name, age, course, research_topic):
    super().__init__(name, age, course)
    self.research_topic = research_topic

  def research(self):
    return f"{self.name} is researching on {self.research_topic}"

gradStudent1 = GraduateStudent("Dhivya", 35, "Data Science", "Machine Learning")
print(gradStudent1.introduction())
print(gradStudent1.research())
print(Student.get_total_students())

"""Method Overriding in Python"""

class GraduateStudent(Student):
  def __init__(self, name, age, course, research_topic):
    super().__init__(name, age, course)
    self.research_topic = research_topic

  def research(self):
    return f"{self.name} is researching on {self.research_topic}"
  def introduction(self):
    return f"I am a Graduate Student: {self.name} researching on {self.research_topic}!"

gradStudent2 = GraduateStudent("Dhivya", 35, "Data Science", "Machine Learning")
print(gradStudent2.introduction())
gradStudent2.get_total_students()

class Customer:

    def __init__(self, name, email):
        self.name = name
        self.email = email
        self.purchase_history = []

    def add_purchase(self, item):
        self.purchase_history.append(item)

    def display_info(self):
        print(f"Name: {self.name}")
        print(f"Email: {self.email}")
        print(f"Purchases: {self.purchase_history}")

customer1 = Customer("John", "john.doe@upgrad.com")
customer1.add_purchase("Laptop")
customer1.add_purchase("Headphones")
customer1.display_info()

import math

# Taking input
r = float(input())

class Circle:
    # Write your code below
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return round(math.pi * pow(self.radius, 2), 2)

c = Circle(r)
circle_area = c.area()
# Print the output
print(circle_area)

# Taking Input
n = int(input())

class Validator:
    # Write your code below
    @staticmethod
    def is_positive(n):
        return n > 0

print(Validator.is_positive(n))

# Input has been taken for you
x = int(input())
y = int(input())

class Calculator:
    # Define all required methods here
    def add(self, x, y):
        return (x + y)

    @classmethod
    def identity(cls):
        return "I'm a Calculator"
    @staticmethod
    def greet():
        return "Hello"


# Expected method calls and printing of results
calc = Calculator()
print(calc.add(x, y))
print(Calculator.identity())
print(Calculator.greet())

# Taking Inputs
name = input()
balance = float(input())

class BankAccount:
    # Write your code here
    def __init__(self, name, balance):
        self.name = name
        self.balance = balance

    def show_balance(self):
        return f"Name: {self.name}, Balance: {self.balance}"

# Create object and print result
ba = BankAccount(name, balance)
print(ba.show_balance())

# Taking Input
f = float(input())

class Temperature:
    # Write your code below
    @classmethod
    def from_fahrenheit(cls, f):
        return round(((f - 32) * 5 / 9), 2)


# Output the Temperature in Celsius
print(Temperature.from_fahrenheit(f))

"""Data Analyst

1. Data Collection
2. Data ETL
3. Data Cleaning
4. EDA
5. Conclusion/Results

GPT is generative pre-trained transformers

Gen AI
1. Coding
2. Debugging
3. Code Understanding

Prompt Engineering class

Assume you are a Python programmer. Write a function to check if a given string or any of its substrings is a palindrome, ignoring case and non-alphanumeric characters. Explain your approach and handle edge cases such as empty strings, single characters, numeric-only inputs, and strings with only special characters.

Check if a String or Its Substring is a Palindrome (Ignoring Case and Non-Alphanumeric Characters) you are a python developer trying to solve this question, write an efficient python code by explaining step by step how to solve this problem. Exclude single character palindrome output. Give example and test with edge-cases to check the code.

Create a Function to Mask an Email Address by Hiding the Username (Except for First and Last Letters). Check if the email-id follows the standard email-id creation criteria used by all email-id domains. If there are special characters in username, hide them also. For single/double character username return invalid email-id.

Create a Python function called mask_email(email) that hides the username in an email address except for the first and last letters. For example, "john.doe@example.com" should become "j******e@example.com". If the username has only one or two characters (like "ab@example.com"), return it unchanged. Make sure to handle invalid inputs (like missing @) gracefully. Include 2–3 example test cases in your output.

You are an expert Python developer. Write a Recursive Function to Reverse a List with input of any type. After this note the even-indexed elements and then Reverse Only Even-Indexed Elements. Lets solve this problem step by step. Test this code with 3 examples with edge-cases.

Write a recursive function reverse_list_special(lst) that first reverses the entire list and then reverses only the elements at even indices (0, 2, 4, …). For example, [1, 2, 3, 4, 5] becomes [5, 4, 3, 2, 1] after full reversal, and then the final output after reversing even-indexed elements is [3, 4, 5, 2, 1]. Another example: [10, 20, 30, 40] becomes [40, 30, 20, 10] after full reversal, and then [20, 30, 40, 10] after reversing even indices. Handle empty lists and single-element lists gracefully and return the final modified list.

# Erroneous Python code for debugging practice
def calculate_sum(numbers)
  total = 0
  for num in numbers
  total += num
  return total
def greet_user(name)
  print("Welcome, " + Name + "!")
nums = [1, 2, 3, 4, 5
print("The sum is: " + calculate_sum(nums))
greet_user("Alice")
you are a python developer. list the errors in the code above and solution to fix it. make the code more readable with documentations. give sample output after fixing the code.

def factorial(n)
if n = 0
return 1
else
return n * factorial(n-1
def print_factors(num):
factors = []
for i in range(1, num+1)
if num % i = 0
factors.append(i print("Factors of", num, "are:", factors)
factorial(5
print_factors(12)

you are an python developer, fix the above the code for the factorial problem. List the errors encountered with solution to fix it. give the corrected code
"""

# Python code with string function errors
def analyze_text(text)
  text_lower = text.lower()
  words = text.split(" ")
  first_word = words[0]
  last_word = words[-1
  if text_lower.startswith("hello")
    greeting = True
  else
    greeting = Flase # typo in boolean
  reversed_text = text_lower.revers() # AttributeError: no revers() method
  print("First word:", first_word)
  print("Last word:", last_word)
  print("Greeting detected:", greeting)
  print("Reversed text:", reversed_text)

sample_text = "Hello World! Python is fun."
analyze_text(sample_text

"""you are a python developer, write a code which will accept a sentence startswith a greeting. Check if the greeting is "hello". Return true if greeting is present, else return false.
Split the sentence with space. get the first and last words.
Reverse the text.
print the first word, last word, if greeting is detected and the reversed text.
Check for the below error:
typo in boolean
AttributeError: no revers() method

https://chatgpt.com/share/68eb3dfa-6e60-8009-8d9f-5c22117b0a5b
"""